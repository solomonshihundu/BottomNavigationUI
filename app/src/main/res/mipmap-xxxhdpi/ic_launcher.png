package com.iridium.houselisting;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class PhotoUpload extends AppCompatActivity {



    private static final String TAG = "PHOTO_UPLOAD";
    private RecyclerView recyclerView;
    private Uri uri;
    private Button mediaBtn;
    private Button nextBtn;
    private String currentPhotoPath = null;
    private final static int REQUEST_CODE_BROWSE_PICTURE = 1;
    private final static int REQUEST_CODE_CAMERA_PERMISSIONS = 0;


    private String _HOUSE_NAME ;
    private String _HOUSE_LOCATION ;
    private String _HOUSE_DESCRIPTION;
    private String _HOUSE_RENT ;
    private String _HOUSE_UNITS ;
    private String _HOUSE_PARKING;
    private String _HOUSE_BATHROOMS;
    private List images = new ArrayList();
    private int imageListIndex = 0;


    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_photo_upload);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);
        getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor("#272957")));
        getSupportActionBar().setTitle("Listing Step 4 ");

        recyclerView = findViewById(R.id.photo_recycler_view);
        mediaBtn = findViewById(R.id.select_photo_btn);
        nextBtn = findViewById(R.id.nextBtn);

        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new GridLayoutManager(this,3));

        mediaBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                proceedToTakePic();
            }
        });


        nextBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
               loadExtrasAndStartNextActivity();
            }
        });

        Intent generalIntent = getIntent();

        //data from general ACTIVITY
        _HOUSE_NAME = generalIntent.getStringExtra("HOUSE_NAME");
        _HOUSE_LOCATION = generalIntent.getStringExtra("HOUSE_LOCATION");
        _HOUSE_DESCRIPTION = generalIntent.getStringExtra("HOUSE_DESCRIPTION");

        //data from Utilities activity
        _HOUSE_RENT = generalIntent.getStringExtra("HOUSE_RENT");
        _HOUSE_UNITS = generalIntent.getStringExtra("HOUSE_UNITS");
        _HOUSE_PARKING = generalIntent.getStringExtra("HOUSE_PARKING");
        _HOUSE_BATHROOMS = generalIntent.getStringExtra("HOUSE_BATHROOMS");


    }

    public void proceedToTakePic()
    {
        final CharSequence[] items = {"Camera", "Gallery"};
        AlertDialog.Builder builder = new AlertDialog.Builder(PhotoUpload.this);
        builder.setTitle("Continue with");
        builder.setItems(items, new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialogInterface, int i) {

                if (items[i].equals("Camera")) {
                    captureFromCamera();
                } else if (items[i].equals("Gallery")) {
                    openPictureGallery();
                }
            }
        });
        builder.show();
    }



    private void captureFromCamera()
    {
        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (cameraIntent.resolveActivity(getPackageManager()) != null) {
            // Create the File where the photo should go
            File photoFile = null;
            try {
                photoFile = createImageFile();
            } catch (IOException ex) {
                // Error occurred while creating the File
                Log.i(TAG, "IOException");
            }

            // Continue only if the File was successfully created
            if (photoFile != null) {
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photoFile));
                startActivityForResult(cameraIntent, REQUEST_CODE_CAMERA_PERMISSIONS);
            }
        }

    }

    /* Invoke android os system file browser to select images. */
    private void openPictureGallery()
    {
        // Create an intent.
        Intent openAlbumIntent = new Intent();

        // Only show images in the content chooser.
        // If you want to select all type data then openAlbumIntent.setType("*/*");
        // Must set type for the intent, otherwise there will throw android.content.ActivityNotFoundException: No Activity found to handle Intent { act=android.intent.action.GET_CONTENT }
        openAlbumIntent.setType("image/*");

        // Set action, this action will invoke android os browse content app.
        openAlbumIntent.setAction(Intent.ACTION_GET_CONTENT);

        openAlbumIntent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);

        // Start the activity.
        startActivityForResult(openAlbumIntent, REQUEST_CODE_BROWSE_PICTURE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        int countClipData = 0;

        //
        switch (requestCode) {

            case REQUEST_CODE_BROWSE_PICTURE:
                Log.d(TAG, "CLIPDATA NOT EMPTY");

                if (data.getData() != null) {
                    uri = data.getData();
                    images.add(new Image(uri));
                } else if (data.getClipData() != null) {
                    countClipData = data.getClipData().getItemCount();

                    while (imageListIndex < countClipData) {
                        uri = data.getClipData().getItemAt(imageListIndex).getUri();
                        images.add(new Image(uri));
                        imageListIndex++;
                    }
                }
                break;
        }

        Adapter adapter = new Adapter(images);
        recyclerView.setAdapter(adapter);

    }

    private File createImageFile() throws IOException
    {

        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,  // prefix
                ".jpg",         // suffix
                storageDir      // directory
        );

        // Save a file: path for use with ACTION_VIEW intents
        currentPhotoPath = "file:" + image.getAbsolutePath();
        return image;
    }


    private void loadExtrasAndStartNextActivity()
    {

        if(TextUtils.isEmpty(_HOUSE_NAME))
        {
            Log.d(TAG,"NO NAME EXTRAS");
            return;
        }

        if(TextUtils.isEmpty(_HOUSE_LOCATION))
        {
            Log.d(TAG,"NO NAME EXTRAS");
            return;
        }

        if(TextUtils.isEmpty(_HOUSE_DESCRIPTION))
        {
            Log.d(TAG,"NO NAME EXTRAS");
            return;
        }

        Intent intent = new Intent(getApplicationContext(),Miscellaneous.class);

        //transfer image data
        if(!images.isEmpty())
        {
            int uploadCount = 0;
            while(uploadCount < images.size())
            {
                // intent.putExtra("IMAGE_"+uploadCount,images.get(uploadCount));
                intent.putIntegerArrayListExtra("IMAGE_"+uploadCount,(ArrayList<Integer>) images);
                uploadCount++;
            }
        }


        //transfer data from General to Miscellaneous
        intent.putExtra("HOUSE_NAME",_HOUSE_NAME.trim());
        intent.putExtra("HOUSE_LOCATION",_HOUSE_LOCATION.trim());
        intent.putExtra("HOUSE_DESCRIPTION",_HOUSE_DESCRIPTION.trim());

        //transfer data from Utilities to Miscellaneous
        intent.putExtra("HOUSE_RENT",_HOUSE_RENT.trim());
        intent.putExtra("HOUSE_UNITS",_HOUSE_UNITS.trim());
        intent.putExtra("HOUSE_PARKING",_HOUSE_PARKING.trim());
        intent.putExtra("HOUSE_BATHROOMS",_HOUSE_BATHROOMS.trim());

        startActivity(intent);

   